// External dependencies
const fs = require("fs")
const path = require("path")
const express = require("express")
const { createWebhooksApi } = require("@octokit/webhooks") // To recieve webhook events
const { createAppAuth } = require("@octokit/auth-app") 
const { Octokit } = require("@octokit/rest")

// Local dependencies
const smeeClient = require(path.join(__dirname, "smee.js"))

// Setup
const port = 64897
const app = express()
const config = JSON.parse(fs.readFileSync("config.json", "utf8"))
const privateKey = fs.readFileSync("gh-app.pem", "utf8")    // Read the downloaded privateKey

const smee = smeeClient(config.webproxy_url, port)
smee.start()

// App
const webhooks = new createWebhooksApi({secret: "SAG", path: "/webhooks"})
app.use(webhooks.middleware)

webhooks.on("issues.opened", async(event) => {
  const { payload } = event

  // const auth = await createAuth(payload) // Coustom function defined below

  // const graphqlWithAuth = graphql.defaults({ // Only required with GraphQL and mutations
  //   request: {
  //     hook: auth.hook // Set the authorization header for the API request.
  //   }
  // })

  // Create a authenicated rest client
  const authRest = createAuthRest(payload)

  // try {
  //   const testQuery = await graphqlWithAuth({
  //     query: "query { viewer { login } }"   // Sends a graphql query.
  //   })
  //   console.log(testQuery)
  // } catch(err) {
  //   console.log(err)
  // }

  // console.log(payload)
  
  const owner = payload.repository.owner.login
  const repo = payload.repository.name
  const issue_number = payload.issue.number
  await authRest.request(`POST /repos/${owner}/${repo}/issues/${issue_number}/comments`,{
    body: "This is a automated comment"
  })
})

webhooks.onError((error) => {
  console.log(`Error occured in handler: ${error.stack}`)
})

const listener = app.listen(port, () => {
  console.log("Your app is listening on port " + listener.address().port)
})

async function createAuthGraphql(p) {
  const auth = await createAppAuth({
    appId: config.github_app_id, // From the config file when the app was created.
    privateKey: privateKey,
    installationId: p.installation.id // Saperate for each installation, house of permission for one repo where it is installed.
  })

  return auth
}

async function createAuthRest(p) {
  const auth = new Octokit({
    authStrategy: createAppAuth,
    auth: {
      appId: config.github_app_id,
      privateKey: privateKey,
      installationId: p.installation.id
    }
  })
  return auth
}

async function createIssueComment(p, authRest) {
  const owner = p.repository.owner.login
  const repo = p.repository.name
  const issue_number = p.issue.number
  await authRest.request(`POST /repos/${owner}/${repo}/issues/${issue_number}/comments`, {
    body: "****** This is a suto generated comment *************\nNew issue is created and will be addressed soon by the team.\nThankyou for your patience."
  })
}